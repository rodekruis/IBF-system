/*
 * App Global CSS
 * ----------------------------------------------------------------------------
 * Put style rules here that you want to apply globally. These styles are for
 * the entire app and not just one component. Additionally, this file can be
 * used as an entry point to import other CSS/Sass files to be included in the
 * output CSS.
 * For more information on global stylesheets, visit the documentation:
 * https://ionicframework.com/docs/layout/global-stylesheets
 */

/* Core CSS required for Ionic components to work properly */
@use '@ionic/angular/css/core.css';

/* Basic CSS for apps built with Ionic */
@use '@ionic/angular/css/normalize.css';
@use '@ionic/angular/css/structure.css';
@use '@ionic/angular/css/typography.css';
@use '@ionic/angular/css/display.css';

/* Optional CSS utils that can be commented out */
@use '@ionic/angular/css/padding.css';
@use '@ionic/angular/css/float-elements.css';
@use '@ionic/angular/css/text-alignment.css';
@use '@ionic/angular/css/text-transformation.css';
@use '@ionic/angular/css/flex-utils.css';

/* ===== CONTEXT-AWARE STYLING FOR WEB COMPONENT EMBEDDING ===== */

/* Root CSS variables for context-aware styling */
:root {
  --ibf-mode: standalone;
  --ibf-viewport-container: body;
  --ibf-app-height: 100vh;
  --ibf-body-overflow: hidden;
  --ibf-body-position: fixed;
}

/* Embedded mode: Switch container from body to component */
:root[data-ibf-mode='embedded'] {
  --ibf-mode: embedded;
  --ibf-viewport-container: ibf-dashboard;
  --ibf-app-height: 600px; /* Default height, can be overridden */
  --ibf-body-overflow: visible;
  --ibf-body-position: static;
}

/* ===== BODY BEHAVIOR - CONDITIONAL ===== */
body {
  /* Only control viewport in standalone mode */
  position: var(--ibf-body-position);
  overflow: var(--ibf-body-overflow);

  /* Keep all other Ionic body styles unchanged */
  font-family: var(--ion-font-family, inherit);
  margin: 0;
  padding: 0;
}

/* In embedded mode, let body behave normally */
:root[data-ibf-mode='embedded'] body {
  position: static !important;
  overflow: visible !important;
  height: auto !important;
  max-height: none !important;
}

/* ===== ION-APP: THE MAIN TRICK ===== */
/* Make ion-app behave like body did in standalone mode */
ion-app {
  /* In standalone mode: exactly like before */
  height: var(--ibf-app-height);
  position: relative;

  /* Preserve all Ionic ion-app behavior */
  contain: layout style paint;
  overflow: hidden;
  user-select: none;
  z-index: 0;
}

/* In embedded mode: ion-app becomes the viewport container */
:root[data-ibf-mode='embedded'] ion-app {
  /* Make ion-app act like the old body */
  position: relative !important;
  height: var(--ibf-app-height) !important;
  width: 100% !important;
  overflow: hidden !important; /* Keep Ionic's overflow behavior */

  /* Add container behavior */
  display: block;
  max-width: 100%;
  max-height: 100%;

  /* Ensure Ionic's internal layout system still works */
  contain: layout style paint;
}

/* ===== ION-CONTENT: PRESERVE IONIC SCROLLING ===== */
/* This is crucial - keep Ionic's internal scrolling intact */
ion-content {
  /* Preserve Ionic's scroll implementation */
  position: relative;
  flex: 1;
  width: 100%;
  height: 100%;

  /* Preserve Ionic behavior */
  contain: layout style paint;
  overflow: hidden;
}

/* Don't touch ion-content in embedded mode - let Ionic handle it */
:root[data-ibf-mode='embedded'] ion-content:not(.main-content) {
  /* Explicitly preserve Ionic behavior */
  position: relative !important;
  overflow: hidden !important; /* Ionic manages scrolling internally */
  height: 100% !important;
}

/* ===== ION-HEADER & ION-FOOTER: PRESERVE POSITIONING ===== */
ion-header,
ion-footer {
  /* Keep existing Ionic positioning logic */
  position: relative;
  width: 100%;
  z-index: 10;
}

/* Don't change header/footer behavior in embedded mode */
:root[data-ibf-mode='embedded'] ion-header,
:root[data-ibf-mode='embedded'] ion-footer {
  position: relative !important;
}

/* ===== ION-ROUTER-OUTLET: PRESERVE ROUTING ===== */
ion-router-outlet {
  position: relative;
  flex: 1;
  contain: layout style paint;
}

:root[data-ibf-mode='embedded'] ion-router-outlet {
  position: relative !important;
  height: auto !important;
}

/* ===== WEB COMPONENT CONTAINER ===== */
/* Make the web component itself a proper viewport */
ibf-dashboard {
  /* In embedded mode, this becomes the viewport */
  display: block;
  width: 100%;
  height: var(--ibf-app-height, 600px);

  /* Ensure it acts like the old body container */
  position: relative;
  overflow: hidden; /* Let Ionic handle internal scrolling */

  /* Provide clean container */
  background: var(--ion-background-color, #ffffff);
  color: var(--ion-text-color, #000000);

  /* Enable Ionic's containment */
  contain: layout style paint;
}

/* ===== PRESERVE IONIC'S INTERNAL LAYOUT MATH ===== */
/* Preserve ion-page behavior */
.ion-page {
  position: relative !important; /* Always relative, never absolute in embedded */
  width: 100%;
  height: 100%;

  /* Keep Ionic's page layout system */
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

/* Preserve Ionic's scroll content */
.inner-scroll {
  /* Don't touch - this is where Ionic implements actual scrolling */
  position: relative !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;

  /* Let Ionic manage overflow */
  overflow-x: hidden !important;
  overflow-y: auto !important;
}

// Workaround for touch-screen laptops
// See: https://github.com/ionic-team/ionic-framework/issues/19942#issuecomment-621944260
// See: https://github.com/ionic-team/ionic-framework/blob/4.11.x/core/src/components/app/app.scss
@media (any-pointer: fine) {
  html.plt-mobile ion-app {
    user-select: auto;
  }
}

.mock-scenario-alert {
  --width: 50%;
  --max-width: 500px;

  .alert-button-group {
    justify-content: space-around;
    flex-direction: row;

    .alert-button-role-cancel {
      color: var(--ion-color-ibf-grey);
    }

    .no-trigger-scenario-button {
      color: var(--ion-color-ibf-no-alert-primary);
    }

    .trigger-scenario-button {
      color: var(--ion-color-ibf-trigger-alert-primary);
    }
  }
}

/*
 * Styling needed for dynamically created LEAFLET elements
 * --------------------------------------------------------
 */

.info {
  padding: 6px 8px;
  font:
    0.75rem Arial,
    Helvetica,
    sans-serif;
  background: white;
  box-shadow: 0 0 0.9375rem rgba(0, 0, 0, 0.2);
  border-radius: 0.3125rem;
  width: 13vw;

  details {
    summary {
      list-style-type: none;

      .legend-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        cursor: pointer;

        .icon-up {
          display: block;
        }
        .icon-down {
          display: none;
        }
      }
    }
    &[open] summary {
      .icon-down {
        display: block;
      }
      .icon-up {
        display: none;
      }
    }
  }
}

.leaflet-popup-content-wrapper {
  border-radius: 8px;
  font-size: 12px;
}

.leaflet-ibf-aggregate-pane {
  z-index: 533;
}

.leaflet-ibf-admin-boundaries-pane {
  z-index: 550;
}

.leaflet-ibf-wms-pane {
  z-index: 575;
  pointer-events: none;
}

.leaflet-outline-pane {
  z-index: 570;
}

.leaflet-popup-pane {
  pointer-events: auto;
}

.trigger-popup-no,
.trigger-popup-min,
.trigger-popup-med,
.trigger-popup-max,
.typhoon-track-popup,
.river-gauge-popup {
  .leaflet-popup-content-wrapper {
    padding: 0;

    .leaflet-popup-content {
      margin: 0;
    }
  }
}

.trigger-popup-no,
.trigger-popup-min,
.trigger-popup-med,
.trigger-popup-max,
.typhoon-track-popup,
.river-gauge-popup {
  a {
    &.leaflet-popup-close-button {
      color: var(--ion-color-ibf-white);
      font-size: 20px;
      padding-top: 5px;
      margin-right: 3px;
    }
  }
}

.waterpoint-cluster-10 {
  border-radius: 24px;
  width: 48px;
  height: 48px;
  background-color: var(--ion-color-fiveten-navy-900);
  color: white;
  &.exposed {
    background-color: var(--ion-color-fiveten-red-500);
  }
  padding-top: 7px;
  text-align: center;
  opacity: 0.7 !important;
}

.waterpoint-cluster-100 {
  border-radius: 30px;
  width: 60px;
  height: 60px;
  background-color: var(--ion-color-fiveten-navy-900);
  color: white;
  &.exposed {
    background-color: var(--ion-color-fiveten-red-500);
  }
  text-align: center;
  padding-top: 10px;
  box-sizing: border-box;
  opacity: 0.7 !important;
}

.waterpoint-cluster-1000 {
  border-radius: 36px;
  width: 72px;
  height: 72px;
  background-color: var(--ion-color-fiveten-navy-900);
  color: white;
  &.exposed {
    background-color: var(--ion-color-fiveten-red-500);
  }
  text-align: center;
  padding-top: 20px;
  box-sizing: border-box;
  opacity: 0.7 !important;
}

.waterpoint-cluster-10000 {
  border-radius: 48px;
  width: 96px;
  height: 966px;
  background-color: var(--ion-color-fiveten-navy-900);
  color: white;
  &.exposed {
    background-color: var(--ion-color-fiveten-red-500);
  }
  text-align: center;
  padding-top: 30px;
  box-sizing: border-box;
  opacity: 0.7 !important;
}

.typhoon-track-icon {
  border-width: 1px;
  border-radius: 50%;
  border-color: var(--ion-color-ibf-primary);
}

.typhoon-track-icon-future {
  border-style: dashed;
  background: rgba(var(--ion-color-ibf-white-rgb), 0.8);
}

.typhoon-track-icon-firstLandfall {
  outline: 3px solid var(--ion-color-ibf-primary) !important;
  outline-offset: 3px;
}

.typhoon-track-icon-past {
  border-style: solid;
  background: var(--ion-color-ibf-primary);
}

.typhoon-track-icon-latest {
  background: var(--ion-color-ibf-primary)
    url('/assets/icons/TyphoonHurricaneCyclone_Track.svg') center no-repeat;
}

.ibf-popover {
  &.ibf-popover-normal {
    --width: 400px;
  }

  &.ibf-popover-large {
    --width: 600px;
  }

  .popover-window-card {
    border: 2px solid var(--ion-color-ibf-primary);
    margin: 0;

    .popover-close-button {
      cursor: pointer;
      position: absolute;
      right: 10px;
      top: 25%;
      z-index: 1;
    }

    ion-card-content.ion-padding-top {
      padding-top: var(--ion-padding, 16px) !important;
    }
  }
}

// https://stackoverflow.com/a/68240841/1753041
input:-webkit-autofill,
input:-webkit-autofill:focus {
  transition:
    background-color 600000s 0s,
    color 600000s 0s;
}

[popover].popover-viewport {
  display: initial;
  position: initial;
  margin: initial;
  border: initial;
  background: initial;
  padding: initial;
  width: initial;
  height: initial;
  overflow: initial;
  inset: initial;
  color: initial;
}

app-tooltip {
  &.absolute {
    position: absolute;
    top: 4px;
    right: 8px;
  }
}

.tooltip--container {
  .popover-viewport {
    padding: 8px;
    overflow: hidden;

    ion-label {
      padding-inline-start: 0;
    }
  }
}

.margin-top-auto {
  margin-top: auto;
}

.font-size-12 {
  font-size: 12px;
}

a {
  color: var(--ion-color-ibf-black);
  text-decoration: underline;
}
