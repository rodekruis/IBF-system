<script lang="ts">
  import { onMount } from 'svelte';
  import { 
    selectedCountry, 
    disasterType, 
    countries, 
    disasterTypes, 
    isLoading, 
    error,
    isEmbedded,
    embedConfig
  } from './lib/stores/app';
  import { 
    isAuthenticated, 
    currentUser, 
    authError,
    authService 
       </div>
    {/if}
  </main>
  
  <!-- Footer (minimal in embedded mode) -->
  {#if !$isEmbedded}
    <footer class="app-footer">
      <div class="footer-content">
        <span>© 2024 IBF System</span>
        <div class="footer-links">
          <a href="#" target="_blank">Documentation</a>
          <a href="#" target="_blank">Support</a>
          {#if $currentUser}
            <span class="user-info">
              Logged in as: {$currentUser.name}
              <button class="logout-btn" on:click={() => authService.logout()}>
                Logout
              </button>
            </span>
          {/if}
        </div>
      </div>
    </footer>
  {/if}
{/if}
</div>rvices/auth';
  import { loadInitialData, loadCountryData } from './lib/services/api';
  import Map from './lib/components/Map.svelte';
  import CountrySelector from './lib/components/CountrySelector.svelte';
  import LayerPanel from './lib/components/LayerPanel.svelte';">
  import { onMount } from 'svelte';
  import { 
    selectedCountry, 
    disasterType, 
    countries, 
    disasterTypes, 
    isLoading, 
    error,
    isEmbedded,
    embedConfig
  } from '../lib/stores/app';
  import { loadInitialData, loadCountryData } from '../lib/services/api';
  import Map from '../lib/components/Map.svelte';
  import CountrySelector from '../lib/components/CountrySelector.svelte';
  import LayerPanel from '../lib/components/LayerPanel.svelte';
  
  let availableLayers: any[] = [];
  let mapComponent: Map;
  
  // Check if running in embedded mode and initialize authentication
  onMount(async () => {
    // Parse URL parameters for embedded mode
    const urlParams = new URLSearchParams(window.location.search);
    const embedded = urlParams.get('embedded') === 'true';
    
    if (embedded) {
      isEmbedded.set(true);
      
      // Configure embed settings
      embedConfig.update(config => ({
        ...config,
        hideControls: urlParams.get('hideControls') === 'true',
        hideHeader: urlParams.get('hideHeader') === 'true',
        theme: urlParams.get('theme') || 'light',
        height: urlParams.get('height') || '400px',
        allowFullscreen: urlParams.get('allowFullscreen') !== 'false'
      }));
    }

    // Initialize authentication
    const authSuccess = await authService.initializeFromParent();
    
    if (!authSuccess && import.meta.env.VITE_REQUIRE_AUTH === 'true') {
      console.error('Authentication required but failed');
      return;
    }

    // Load initial application data only after authentication
    try {
      const { countries: countriesData, disasterTypes: disasterTypesData } = await loadInitialData();
      countries.set(countriesData);
      disasterTypes.set(disasterTypesData);
      
      // Set initial country/disaster if provided in URL
      const countryCode = urlParams.get('country');
      const disaster = urlParams.get('disaster');
      
      if (countryCode) {
        setTimeout(() => {
          const country = $countries.find(c => c.code === countryCode);
          if (country) {
            selectedCountry.set(country);
            if (disaster) {
              const disasterObj = $disasterTypes.find(d => d.code === disaster);
              if (disasterObj) {
                disasterType.set(disasterObj);
              }
            }
          }
        }, 1000);
      }
    } catch (err) {
      console.error('Failed to load initial data:', err);
    }
  });
  
  // Load country-specific data when country changes
  $: if ($selectedCountry) {
    loadCountrySpecificData($selectedCountry, $disasterType);
  }
  
  async function loadCountrySpecificData(country: any, disaster: any) {
    if (!country) return;
    
    try {
      const data = await loadCountryData(country.code, disaster?.code);
      availableLayers = data.layers || [];
      
      // Focus map on country
      if (mapComponent && country.geometry) {
        // Map component will handle this via store subscription
      }
    } catch (err) {
      console.error('Failed to load country data:', err);
    }
  }
  
  function handleMapFeatureClick(event: CustomEvent) {
    const { features, coordinate } = event.detail;
    
    if (features.length > 0) {
      // Handle feature click - could show popup, details panel, etc.
      console.log('Feature clicked:', features[0].getProperties());
      
      // For embedded mode, post message to parent
      if ($isEmbedded && window.parent !== window) {
        window.parent.postMessage({
          type: 'IBF_FEATURE_CLICK',
          data: {
            feature: features[0].getProperties(),
            coordinate
          }
        }, '*');
      }
    }
  }
  
  // Handle messages from parent window (for embedded mode)
  function handleParentMessage(event: MessageEvent) {
    if (!$isEmbedded) return;
    
    const { type, data } = event.data;
    
    switch (type) {
      case 'IBF_SET_COUNTRY':
        const country = $countries.find(c => c.code === data.countryCode);
        if (country) {
          selectedCountry.set(country);
        }
        break;
        
      case 'IBF_SET_DISASTER':
        const disaster = $disasterTypes.find(d => d.code === data.disasterCode);
        if (disaster) {
          disasterType.set(disaster);
        }
        break;
        
      case 'IBF_FOCUS_LOCATION':
        if (mapComponent && data.coordinate) {
          mapComponent.setCenter(data.coordinate, data.zoom);
        }
        break;
    }
  }
  
  // Keyboard shortcuts
  function handleKeydown(event: KeyboardEvent) {
    if (event.ctrlKey || event.metaKey) {
      switch (event.key) {
        case 'f':
          event.preventDefault();
          // Focus search
          const searchInput = document.querySelector('.country-search') as HTMLInputElement;
          searchInput?.focus();
          break;
      }
    }
  }
</script>

<svelte:window on:message={handleParentMessage} on:keydown={handleKeydown} />

<div 
  class="app-container" 
  class:embedded={$isEmbedded}
  class:theme-dark={$embedConfig.theme === 'dark'}
  style={$isEmbedded ? `height: ${$embedConfig.height}` : ''}
>
  <!-- Authentication check -->
  {#if import.meta.env.VITE_REQUIRE_AUTH === 'true' && !$isAuthenticated}
    <div class="auth-required">
      <div class="auth-content">
        <h2>Authentication Required</h2>
        {#if $authError}
          <div class="auth-error">
            <p>Authentication failed: {$authError}</p>
            <button on:click={() => authService.refreshToken()}>
              Retry Authentication
            </button>
          </div>
        {:else}
          <div class="auth-loading">
            <div class="loading-spinner"></div>
            <p>Authenticating with Azure AD...</p>
          </div>
        {/if}
      </div>
    </div>
  {:else}
  <!-- Loading overlay -->
  {#if $isLoading}
    <div class="loading-overlay">
      <div class="loading-spinner"></div>
      <div class="loading-text">Loading...</div>
    </div>
  {/if}
  
  <!-- Error notification -->
  {#if $error}
    <div class="error-notification">
      <div class="error-content">
        <svg class="error-icon" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>
        <span>{$error}</span>
        <button 
          class="error-close"
          on:click={() => error.set(null)}
          aria-label="Close error"
        >
          ×
        </button>
      </div>
    </div>
  {/if}
  
  <!-- App header (hidden in embedded mode if configured) -->
  {#if !$isEmbedded || !$embedConfig.hideHeader}
    <header class="app-header">
      <div class="header-content">
        <div class="app-title">
          <h1>IBF Dashboard</h1>
          {#if $isEmbedded}
            <span class="embed-badge">Embedded</span>
          {/if}
        </div>
        
        <div class="header-controls">
          <CountrySelector compact={$isEmbedded} />
          
          {#if $disasterTypes.length > 0}
            <select 
              class="disaster-selector"
              bind:value={$disasterType}
              disabled={!$selectedCountry}
            >
              <option value={null}>Select disaster type</option>
              {#each $disasterTypes as disaster}
                <option value={disaster}>{disaster.name}</option>
              {/each}
            </select>
          {/if}
        </div>
      </div>
    </header>
  {/if}
  
  <!-- Main content area -->
  <main class="app-main">
    <div class="content-grid">
      <!-- Map container -->
      <div class="map-section">
        <Map 
          bind:this={mapComponent}
          width="100%"
          height={$isEmbedded ? '100%' : '500px'}
          showControls={!$embedConfig.hideControls}
          showLegend={!$isEmbedded}
          on:featureClick={handleMapFeatureClick}
        />
        
        {#if $isEmbedded && $embedConfig.allowFullscreen}
          <button 
            class="fullscreen-btn"
            on:click={() => {
              if (window.parent !== window) {
                window.parent.postMessage({
                  type: 'IBF_REQUEST_FULLSCREEN'
                }, '*');
              }
            }}
            title="Open in fullscreen"
          >
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707z"/>
            </svg>
          </button>
        {/if}
      </div>
      
      <!-- Side panel (hidden in embedded mode) -->
      {#if !$isEmbedded && $selectedCountry}
        <div class="side-panel">
          <LayerPanel 
            layers={availableLayers}
            maxHeight="400px"
          />
          
          <!-- Additional info panels can go here -->
          {#if $selectedCountry}
            <div class="country-info">
              <h3>Country Information</h3>
              <div class="info-grid">
                <div class="info-item">
                  <label>Name:</label>
                  <span>{$selectedCountry.name}</span>
                </div>
                <div class="info-item">
                  <label>Code:</label>
                  <span>{$selectedCountry.code}</span>
                </div>
                {#if $selectedCountry.population}
                  <div class="info-item">
                    <label>Population:</label>
                    <span>{$selectedCountry.population.toLocaleString()}</span>
                  </div>
                {/if}
              </div>
            </div>
          {/if}
        </div>
      {/if}
    </div>
  </main>
  
  <!-- Footer (minimal in embedded mode) -->
  {#if !$isEmbedded}
    <footer class="app-footer">
      <div class="footer-content">
        <span>© 2024 IBF System</span>
        <div class="footer-links">
          <a href="#" target="_blank">Documentation</a>
          <a href="#" target="_blank">Support</a>
        </div>
      </div>
    </footer>
  {/if}
</div>

<style>
  .app-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    background-color: #f8fafc;
    position: relative;
  }
  
  .app-container.embedded {
    min-height: auto;
    height: 100%;
    background-color: white;
  }
  
  .app-container.theme-dark {
    background-color: #1a202c;
    color: white;
  }
  
  /* Loading overlay */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }
  
  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e2e8f0;
    border-top: 4px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .loading-text {
    margin-top: 16px;
    color: #6b7280;
    font-size: 0.875rem;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* Error notification */
  .error-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    max-width: 400px;
  }
  
  .error-content {
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 8px;
    padding: 12px 16px;
    display: flex;
    align-items: center;
    gap: 12px;
    color: #b91c1c;
    font-size: 0.875rem;
  }
  
  .error-icon {
    flex-shrink: 0;
  }
  
  .error-close {
    background: none;
    border: none;
    color: #b91c1c;
    font-size: 1.25rem;
    cursor: pointer;
    margin-left: auto;
    padding: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Header */
  .app-header {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 12px 20px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1400px;
    margin: 0 auto;
  }
  
  .app-title {
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .app-title h1 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
  }
  
  .embed-badge {
    background: #3b82f6;
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .header-controls {
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .disaster-selector {
    padding: 6px 8px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    background: white;
    font-size: 0.875rem;
    min-width: 180px;
  }
  
  .disaster-selector:disabled {
    background: #f9fafb;
    color: #9ca3af;
    cursor: not-allowed;
  }
  
  /* Main content */
  .app-main {
    flex: 1;
    padding: 20px;
    max-width: 1400px;
    margin: 0 auto;
    width: 100%;
  }
  
  .embedded .app-main {
    padding: 0;
    height: 100%;
  }
  
  .content-grid {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 20px;
    height: 100%;
  }
  
  .embedded .content-grid {
    grid-template-columns: 1fr;
    gap: 0;
  }
  
  .map-section {
    position: relative;
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .embedded .map-section {
    border-radius: 0;
    box-shadow: none;
    height: 100%;
  }
  
  .fullscreen-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 4px;
    padding: 8px;
    cursor: pointer;
    color: #374151;
    transition: all 0.2s ease;
    z-index: 10;
  }
  
  .fullscreen-btn:hover {
    background: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .side-panel {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .country-info {
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 16px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .country-info h3 {
    margin: 0 0 12px 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
  }
  
  .info-grid {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  
  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .info-item label {
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 500;
  }
  
  .info-item span {
    font-size: 0.875rem;
    color: #374151;
  }
  
  /* Footer */
  .app-footer {
    background: white;
    border-top: 1px solid #e2e8f0;
    padding: 16px 20px;
    margin-top: auto;
  }
  
  .footer-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1400px;
    margin: 0 auto;
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  .footer-links {
    display: flex;
    gap: 16px;
  }
  
  .footer-links a {
    color: #6b7280;
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .footer-links a:hover {
    color: #3b82f6;
  }
  
  /* Responsive design */
  @media (max-width: 1024px) {
    .content-grid {
      grid-template-columns: 1fr;
    }
    
    .side-panel {
      grid-row: 1;
    }
    
    .map-section {
      grid-row: 2;
    }
  }
  
  @media (max-width: 768px) {
    .app-main {
      padding: 10px;
    }
    
    .header-content {
      flex-direction: column;
      gap: 12px;
      align-items: stretch;
    }
    
    .header-controls {
      flex-wrap: wrap;
    }
    
    .content-grid {
      gap: 10px;
    }
    
    .country-info {
      padding: 12px;
    }
  }
</style>
